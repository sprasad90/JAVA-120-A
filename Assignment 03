package cp120.assignments.assignment003;

import java.math.BigInteger;
import java.util.Arrays;

/**
 * A simple class to perform common arithmetic calculations. 
 * This is the sample solution for CP120 Assignment 1.
 * 
 * @author jack
 */
public class Numbers
{
    /**
     * Returns true if a given integer is prime.
     * <p><strong>Precondition:
     * </strong> <em>num</em> is a non-negative integer.</p>
     * <p><strong>Postcondition:
     * </strong> If <em>num</em> is 0 or 1 the result will be false.</p>
     * @param num The given integer
     * @return True if the given integer is prime.
     */
    public static boolean isPrime( int num )
    {
        boolean rcode   = true;
        
        if ( num < 2 )
            rcode = false;
        else if ( num == 2 )
            rcode = true;
        else if ( num % 2 == 0 )
            rcode = false;
        else
        {
            int last    = num / 2;
            for ( int inx = 3 ; inx < last && rcode ; ++inx )
                if ( num % inx == 0 )
                    rcode = false;
        }
        
        return rcode;
    }
    
    /**
     * Return the least common multiple of two given integers.
     * <p><strong>Precondition:
     * </strong> <em>param1</em> and <em>param2</>
     * are non-negative integers.</p>
     * <p><strong>Postcondition:
     * </strong> If <em>param1</em> or <em>param2</em> are 0 
     * the result will be 0.
     * @param param1    The first given integer
     * @param param2    The second given integer
     * @return The least common multiple of the two given integers
     */
    public static int lcm( int param1, int param2 )
    {
        int result  = 0;
        int num1    = Math.abs( param1 );
        int num2    = Math.abs( param2 );
        if ( num1 != 0 && num2 != 0 )
        {
            int larger  = num1;
            int smaller = num2;
            if ( num2 > num1 )
            {
                larger = num2;
                smaller = num1;
            }
            
            int inx     = 1;
            while ( result == 0 )
            {
                int product = inx * larger;
                if ( product % smaller == 0  )
                    result = product;
                ++inx;
            }
        }
        
        return result;
    }
    
    /**
     * Return the greatest common factor of two given integers.
     * If either of the integers is 0 the result will be 0.
     * <p><strong>Precondition:
     * </strong> <em>param1</em> and <em>param2</em> non-negative integers.</p>
     * <p><strong>Postcondition:
     * </strong> If <em>param1</em> or <em>param2</em> is 0 the result will 
     * be 0.</p>
     * @param param1    The first given integer
     * @param param2    The second given integer
     * @return The greatest common factor of the two given integers
     */
    public static int gcf( int param1, int param2 )
    {
        int result  = 1;
        int num1    = Math.abs( param1 );
        int num2    = Math.abs( param2 );
        if ( num1 == 0 || num2 == 0 )
            result = 0;
        else
        {
            int limit = num1 < num2 ? num1 : num2;
            
            for ( int inx = 1 ; inx <= limit ; ++inx )
                if ( num1 % inx == 0 && num2 % inx == 0 )
                    result = inx;
        }
        
        return result;
    }
    
    /**
     * Returns the sum of the digits of a given number.
     * <p><strong>Precondition:
     * </strong> <em>num</em> is a non-negative integer.</p>
     * @param num The given number.
     * @return The sum of the digits of the given number
     */
    public static int digitSum( int num )
    {
        int temp    = Math.abs( num );
        int sum     = 0;
        while ( temp > 0 )
        {
            int digit   = temp % 10;
            sum += digit;
            temp /= 10;
        }
        
        return sum;
    }
    
    /**
     * Calculate the mean of a given array of decimal numbers.
     * @param arr   The given array.
     * @return The mean of the given array of decimal numbers
     */
    public static double mean( double[] arr )
    {
        double  sum = 0;
        for ( int inx = 0 ; inx < arr.length ; ++inx )
            sum += arr[inx];
        
        double  mean    = sum / arr.length;
        return mean;
    }
    
    
    /**
     * Calculate the median of a given array of decimal numbers.
     * @param arr   The given array.
     * @return The median of the given array of decimal numbers
     */
    public static double median( double[] arr )
    {
        Arrays.sort( arr );
        int     half    = (arr.length - 1) / 2;
        double  median  = arr[half];
        
        if ( arr.length % 2 == 0 )
            median = (median + arr[half + 1]) / 2;
        return median;
    }
    
    /**
     * Returns the factorial of a given integer.
     * <p><strong>Precondition:
     * </strong> <em>num</em> is a non-negative integer.</p>
     * <p><strong>Postcondition:
     * </strong> If <em>num</em> is 0 the result will be one.</p>
     * @param num The given integer.
     * @return The factorial of the given integer
     */
    public static BigInteger factorial( int num )
    {
        BigInteger  bigNum  = BigInteger.valueOf( num );
        BigInteger  result  = factorial( bigNum );
        return result;
    }
    
    /**
     * Returns the factorial of a given integer.
     * <p><strong>Precondition:
     * </strong> <em>num</em> is a non-negative integer.</p>
     * <p><strong>Postcondition:
     * </strong> If <em>num</em> is 0 the result will be one.</p>
     * @param num The given integer.
     * @return The factorial of the given integer
     */
    public static BigInteger factorial( BigInteger num )
    {
        BigInteger  temp    = num.add( BigInteger.ZERO );
        BigInteger  result  = BigInteger.ONE;
        while ( temp.compareTo( BigInteger.ONE ) > 0 )
        {
            result = result.multiply( temp );
            temp = temp.subtract( BigInteger.ONE );
        }
        return result;
    }
}
